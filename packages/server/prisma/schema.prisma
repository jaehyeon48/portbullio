generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id                Int                 @id @default(autoincrement()) @map("user_id")
  authType          UserAuthType        @map("auth_type")
  username          String              @db.VarChar(30)
  avatar            String?             @db.VarChar(41)
  currency          String              @db.Char(3)
  bio               String?             @db.Text
  location          String?             @db.Text
  createdAt         DateTime            @default(now()) @db.Timestamp(0) @map("created_at")
  defaultPortfolio  DefaultPortfolio[]
  favoriteStock     FavoriteStock[]
  portfolio         Portfolio[]
  userAuthId        UserAuthId[]

  @@map("user")
}

model UserAuthId {
  authId   String       @map("auth_id") @db.VarChar(255)
  authType UserAuthType @map("auth_type")
  userId   Int          @map("user_id")
  user     User         @relation(fields: [userId], references: [id], onDelete: Cascade, map: "fk_user_auth_id_user_user_id")

  @@map("user_auth_id")
  @@id([authId, authType])
}

model Portfolio {
  id                  Int                     @id @default(autoincrement()) @map("portfolio_id")
  userId              Int                     @map("user_id")
  name                String                  @db.VarChar(20) @map("portfolio_name")
  privacy             PortfolioPrivacy
  createdAt           DateTime                @default(now()) @db.Timestamp(0) @map("created_at")
  user                User                    @relation(fields: [userId], references: [id], onDelete: Cascade, map: "fk_portfolio_user_user_id")
  cashTransactionLog  CashTransactionLog[]
  defaultPortfolio    DefaultPortfolio[]
  stockTransactionLog StockTransactionLog[]

  @@map("portfolio")
  @@index([userId], map: "user_id_idx")
}

model FavoriteStock {
  userId  Int    @map("user_id")
  ticker  String @db.VarChar(7)
  user    User   @relation(fields: [userId], references: [id], onDelete: Cascade, map: "fk_favorite_stock_user_user_id")

  @@map("favorite_stock")
  @@id([userId, ticker])
}

model CashTransactionLog {
  id                  Int                 @id @default(autoincrement()) @map("cash_transaction_id")
  portfolioId         Int                 @map("portfolio_id")
  amount              Float
  memo                String?             @db.Text
  transactionType     CashTransactionType @map("transaction_type")
  createdAt           DateTime            @default(now()) @db.Timestamp(0) @map("created_at")
  portfolio           Portfolio           @relation(fields: [portfolioId], references: [id], onDelete: Cascade, map: "fk_cash_transaction_log_portfolio_portfolio_id")

  @@map("cash_transaction_log")
  @@index([portfolioId], map: "fk_cash_transaction_log_portfolio_portfolio_id_idx")
}

model DefaultPortfolio {
  userId       Int       @map("user_id")
  portfolioId  Int       @map("portfolio_id")
  portfolio    Portfolio @relation(fields: [portfolioId], references: [id], onDelete: Cascade, map: "fk_default_portfolio_portfolio_portfolio_id")
  user         User      @relation(fields: [userId], references: [id], onDelete: Cascade, map: "fk_default_portfolio_user_user_id")

  @@map("default_portfolio")
  @@id([userId, portfolioId])
  @@index([portfolioId], map: "fk_default_portfolio_portfolio_portfolio_id_idx")
}

model StockTransactionLog {
  id                  Int                  @id @default(autoincrement()) @map("stock_transaction_id")
  portfolioId         Int                  @map("portfolio_id")
  ticker              String               @db.VarChar(7)
  price               Float
  quantity            Int
  memo                String?              @db.Text
  transactionType     StockTransactionType @map("transaction_type")
  isRealized          Boolean              @default(false) @map("is_realized")
  createdAt           DateTime             @default(now()) @db.Timestamp(0) @map("created_at")
  portfolio           Portfolio            @relation(fields: [portfolioId], references: [id], onDelete: Cascade, map: "fk_stock_transaction_log_portfolio_portfolio_id")

  @@map("stock_transaction_log")
  @@index([portfolioId], map: "fk_stock_transaction_log_portfolio_portfolio_id_idx")
}

enum UserAuthType {
  google
  kakao
  naver
}

enum PortfolioPrivacy {
  public
  private
}

enum CashTransactionType {
  deposit
  withdraw
  purchased
  sold
  dividend
}

enum StockTransactionType {
  buy
  sell
}
